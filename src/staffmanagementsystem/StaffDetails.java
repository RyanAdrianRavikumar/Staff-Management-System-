package staffmanagementsystem;

import java.math.BigDecimal;
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class StaffDetails extends javax.swing.JFrame {

    /**
     * Creates new form StaffDetails
     */
    public StaffDetails() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel10 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        lastNameField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        addressTextArea = new javax.swing.JTextArea();
        phoneField = new javax.swing.JTextField();
        jobPositionComboBox = new javax.swing.JComboBox<>();
        monthlySalaryField = new javax.swing.JTextField();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        btnReset = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        StaffTable = new javax.swing.JTable();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnShowTable = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/88246.jpg"))); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Staff Details - Staff Management System");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Staff Details");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, -1, -1));

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("First Name:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Last Name:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Address:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Phone: ");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Monthly Salary:");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Job Position:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Username:");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Password:");

        addressTextArea.setColumns(20);
        addressTextArea.setRows(5);
        jScrollPane1.setViewportView(addressTextArea);

        jobPositionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Job Position", "Staff", "Manager", "Administrator" }));

        btnReset.setBackground(new java.awt.Color(255, 0, 51));
        btnReset.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnReset.setForeground(new java.awt.Color(255, 255, 255));
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnRegister.setBackground(new java.awt.Color(0, 204, 0));
        btnRegister.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnRegister.setForeground(new java.awt.Color(255, 255, 255));
        btnRegister.setText("Register");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(phoneField)
                            .addComponent(firstNameField)
                            .addComponent(lastNameField)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE)
                            .addComponent(jobPositionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(monthlySalaryField)
                            .addComponent(usernameField)
                            .addComponent(passwordField)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(1333, 1333, 1333))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jobPositionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(monthlySalaryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 520, 520));

        StaffTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Staff ID", "First Name ", "Last Name ", "Address", "Phone", "Job Position ", "Monthly Salary", "Username", "Password"
            }
        ));
        StaffTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StaffTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(StaffTable);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(545, 131, 770, 350));

        btnUpdate.setBackground(new java.awt.Color(51, 255, 0));
        btnUpdate.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btnUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 500, 100, 41));

        btnDelete.setBackground(new java.awt.Color(255, 0, 51));
        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete ");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(1090, 500, 100, 41));

        btnShowTable.setBackground(new java.awt.Color(255, 153, 0));
        btnShowTable.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnShowTable.setForeground(new java.awt.Color(255, 255, 255));
        btnShowTable.setText("Show Table");
        btnShowTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTableActionPerformed(evt);
            }
        });
        getContentPane().add(btnShowTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 500, -1, 40));

        btnBack.setBackground(new java.awt.Color(0, 102, 255));
        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnBack.setForeground(new java.awt.Color(255, 255, 255));
        btnBack.setText("<- Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        getContentPane().add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 100, 30));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/staffmanagementsystem/88246.jpg"))); // NOI18N
        jLabel11.setText("jLabel11");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(-7, -4, 1360, 700));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    class ShowTable{
        public void displayTableData(){
            try {
                
                //Establish Connection to Database
                String Path = "jdbc:mysql://localhost/staffmanagementsystem";
                Connection con = DriverManager.getConnection(Path, "root", "Zxcv@7890");

                //Prepare query to get staff table data
                PreparedStatement pst2 = con.prepareStatement("SELECT * FROM staff");
                ResultSet rs = pst2.executeQuery();

       
                DefaultTableModel model = (DefaultTableModel) StaffTable.getModel();
                model.setRowCount(0); 

        
                while (rs.next()) {
                    //Get row data from each row of the table 
                    String staffId = String.valueOf(rs.getInt("staff_id"));  
                    String firstName = rs.getString("first_name");
                    String lastName = rs.getString("last_name");
                    String address = rs.getString("address");
                    String phone = rs.getString("phone");
                    String jobPosition = rs.getString("job_position");
                    String monthlySalary = String.valueOf(rs.getDouble("monthly_salary"));  // Convert monthly_salary to String
                    String username = rs.getString("username");
                    String password = rs.getString("password");

            

                    //Store table row as a string array
                    String[] row = {staffId, firstName, lastName, address, phone, jobPosition, monthlySalary, username, password};
                        
                    //Add the table row into the table
                    model.addRow(row);
                }

                //Close connection 
                con.close();
                
                } catch (SQLException ex1) {
                    JOptionPane.showMessageDialog(null, "Database Error: " + ex1.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                } catch (Exception ex) {
                    System.out.println("Error: " + ex.getMessage());
                }
        }
    }
    
    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        
        if(firstNameField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "First Name is Required!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(lastNameField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Last Name is Required!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(addressTextArea.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Address Field is Empty!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(!phoneField.getText().matches("\\d+") || phoneField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Phone Must Only Contain Numbers!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        //This validation allows the user to only enter numbers and decimals upto 2 d.p
        if(!monthlySalaryField.getText().matches("\\d+(\\.\\d{1,2})?")){
            JOptionPane.showMessageDialog(null, "Monthly Salary Must Contain a Number!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(jobPositionComboBox.getSelectedItem() == "Select Job Position"){
            JOptionPane.showMessageDialog(null, "Please Select a Job Position!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(usernameField.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Username is Required!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(passwordField.getPassword().length == 0){
            JOptionPane.showMessageDialog(null, "Password is Required!", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try{
            
            //Establish Connection to Database
            String Path = "jdbc:mysql://localhost/staffmanagementsystem";
            Connection con = DriverManager.getConnection(Path, "root", "Zxcv@7890");
        
            //Prepare query to insert data into the staff table
            PreparedStatement pst = con.prepareStatement("INSERT INTO staff (first_name, last_name, address, phone, job_position, monthly_salary, username, password) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
            pst.setString(1, firstNameField.getText());
            pst.setString(2, lastNameField.getText());
            pst.setString(3, addressTextArea.getText());
            pst.setString(4, phoneField.getText());
            pst.setString(5, (String) jobPositionComboBox.getSelectedItem());
            BigDecimal monthlySalary = new BigDecimal(monthlySalaryField.getText());
            pst.setBigDecimal(6, monthlySalary);
        pst.setString(7, usernameField.getText());
            String password = new String(passwordField.getPassword());
            pst.setString(8, password);
       
            int result = pst.executeUpdate();
            ShowTable sh = new ShowTable();
            sh.displayTableData();
        
            JOptionPane.showMessageDialog(null, "Number of Records Inserted: " + result, "Record Added Sucessfully!", JOptionPane.INFORMATION_MESSAGE);
        
        } catch(SQLException ex1){
            JOptionPane.showMessageDialog(null, "Database Error: " + ex1.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnRegisterActionPerformed

private void WindowOpened(java.awt.event.WindowEvent evt) {
    
}

    
    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        //Reset all values in the login form 
        firstNameField.setText("");
        lastNameField.setText("");
        phoneField.setText("");
        monthlySalaryField.setText("");
        usernameField.setText("");
        addressTextArea.setText("");
        passwordField.setText("");
        jobPositionComboBox.setSelectedIndex(0);
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnShowTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowTableActionPerformed
       try {
        
            //Establish Connection to Database
            String Path = "jdbc:mysql://localhost/staffmanagementsystem";
            Connection con = DriverManager.getConnection(Path, "root", "Zxcv@7890");

            //Prepare query to get staff table data
            PreparedStatement pst2 = con.prepareStatement("SELECT * FROM staff");
            ResultSet rs = pst2.executeQuery();

            //Manage the table using the table model
            DefaultTableModel model = (DefaultTableModel) StaffTable.getModel();
            model.setRowCount(0); 

        
            while (rs.next()) {
                //Get row data from database 
                String staffId = String.valueOf(rs.getInt("staff_id"));  
                String firstName = rs.getString("first_name");
                String lastName = rs.getString("last_name");
                String address = rs.getString("address");
                String phone = rs.getString("phone");
                String jobPosition = rs.getString("job_position");
                String monthlySalary = String.valueOf(rs.getInt("monthly_salary"));  
                String username = rs.getString("username");
                String password = rs.getString("password");

                //Store table row as a string array
                String[] row = {staffId, firstName, lastName, address, phone, jobPosition, monthlySalary, username, password};
                 
                //Add the table row into the table
                model.addRow(row);
            }

            //Close connection 
            con.close();
        
        } catch (SQLException ex1) {
            JOptionPane.showMessageDialog(null, "Database Error: " + ex1.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            System.out.println("Error: " + ex.getMessage());
        
        }
    }//GEN-LAST:event_btnShowTableActionPerformed

    private void StaffTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StaffTableMouseClicked
        //On mouse click get selected table row
        int selectedRow = StaffTable.getSelectedRow();
    
        //Ensure that a valid row is selected
        if(selectedRow != -1) {
            //If valid row is selected then retrieve data from row 
            String staffId = StaffTable.getValueAt(selectedRow, 0).toString(); 
            String firstName = StaffTable.getValueAt(selectedRow, 1).toString();
            String lastName = StaffTable.getValueAt(selectedRow, 2).toString();
            String address = StaffTable.getValueAt(selectedRow, 3).toString();
            String phone = StaffTable.getValueAt(selectedRow, 4).toString();
            String jobPosition = StaffTable.getValueAt(selectedRow, 5).toString();
            String monthlySalary = StaffTable.getValueAt(selectedRow, 6).toString();
            String username = StaffTable.getValueAt(selectedRow, 7).toString();
            String password = StaffTable.getValueAt(selectedRow, 8).toString();

            //Set textfields with the selected row data
            firstNameField.setText(firstName);
            lastNameField.setText(lastName);
            addressTextArea.setText(address);
            phoneField.setText(phone);
            jobPositionComboBox.setSelectedItem(jobPosition);
            monthlySalaryField.setText(monthlySalary);
            usernameField.setText(username);
            passwordField.setText(password);
        }
    }//GEN-LAST:event_StaffTableMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       int selectedRow = StaffTable.getSelectedRow();
            
            //Ensure that a valid row is selected 
            if(selectedRow != -1) {
                try {
                    //Retrive StaffID from the selected table row 
                    String staffId = StaffTable.getValueAt(selectedRow, 0).toString();

                    //Retrive any updated data from the entry form
                    String firstName = firstNameField.getText();
                    String lastName = lastNameField.getText();
                    String address = addressTextArea.getText();
                    String phone = phoneField.getText();
                    String jobPosition = jobPositionComboBox.getSelectedItem().toString();
                    String monthlySalary = monthlySalaryField.getText();
                    String username = usernameField.getText();
                    String password = new String(passwordField.getPassword());  
            
                    //Establish Connection to Database
                    String Path = "jdbc:mysql://localhost/staffmanagementsystem";
                    Connection con = DriverManager.getConnection(Path, "root", "Zxcv@7890");
            
                    //Prepare query to update staff table
                    PreparedStatement pst = con.prepareStatement("UPDATE staff SET first_name = ?, last_name = ?, address = ?, phone = ?, job_position = ?, monthly_salary = ?, username = ?, password = ? WHERE staff_id = ?");

            
                    pst.setString(1, firstName);
                    pst.setString(2, lastName);
                    pst.setString(3, address);
                    pst.setString(4, phone);
                    pst.setString(5, jobPosition);
                    pst.setString(6, monthlySalary);
                    pst.setString(7, username);
                    pst.setString(8, password);
                    pst.setString(9, staffId);  

           
                    int result = pst.executeUpdate();
                    
                    //Create showTable object and call displayTableData to refresh the table after update
                    ShowTable sh = new ShowTable();
                    sh.displayTableData();
                    
                    JOptionPane.showMessageDialog(null, "Number of Records Updated: " + result, "Record Added Sucessfully!", JOptionPane.INFORMATION_MESSAGE);
            
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Please select a row to update.", "Selection Error", JOptionPane.WARNING_MESSAGE);
            }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedRow = StaffTable.getSelectedRow();
    
        //Selected row on a table would have an index higher then -1, if no row is selected index = -1 
        if (selectedRow != -1) {
            //Confirmation to delete where 0 = "yes" 1 = "no"
            int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this Record?", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
        
        
            if (confirm == 0) {
                try {
                    //Retrieve the staff_id of the selected table row 
                    String staffId = StaffTable.getValueAt(selectedRow, 0).toString();

                    //Establish Connection to Database
                    String Path = "jdbc:mysql://localhost/staffmanagementsystem";
                    Connection con = DriverManager.getConnection(Path, "root", "Zxcv@7890");

                    //Delete Statement
                    PreparedStatement pst = con.prepareStatement("DELETE FROM staff WHERE staff_id = ?");
                    pst.setString(1, staffId);
                    
                    int rows = pst.executeUpdate();
                
                    ShowTable sh = new ShowTable();
                    sh.displayTableData();
                    
                    JOptionPane.showMessageDialog(null, "Number of Records Deleted: " + rows, "Alert", JOptionPane.INFORMATION_MESSAGE);
             
                    con.close();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Database Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to delete.", "Selection Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
       AdminDashboard ad = new AdminDashboard();
       ad.setVisible(true);
       this.setVisible(false);
    }//GEN-LAST:event_btnBackActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StaffDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StaffDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StaffDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StaffDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StaffDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable StaffTable;
    private javax.swing.JTextArea addressTextArea;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnShowTable;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> jobPositionComboBox;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JTextField monthlySalaryField;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField phoneField;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables
}
